
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gu.language;

import java_cup.runtime.*;
import app.tree.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\003\006\000\002\004\004\000\002\004\003" +
    "\000\002\005\007\000\002\005\004\000\002\006\003\000" +
    "\002\006\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\004\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\004\000\002\011\004" +
    "\000\002\011\003\000\002\012\003\000\002\012\003\000" +
    "\002\013\006\000\002\016\004\000\002\016\003\000\002" +
    "\014\006\000\002\017\004\000\002\017\003\000\002\021" +
    "\006\000\002\021\006\000\002\021\006\000\002\021\006" +
    "\000\002\021\006\000\002\021\006\000\002\021\006\000" +
    "\002\021\004\000\002\022\006\000\002\022\006\000\002" +
    "\022\006\000\002\022\006\000\002\022\003\000\002\022" +
    "\004\000\002\015\006\000\002\020\004\000\002\020\003" +
    "\000\002\023\006\000\002\023\006\000\002\023\006\000" +
    "\002\023\006\000\002\023\004\000\002\024\006\000\002" +
    "\025\004\000\002\025\003\000\002\026\011\000\002\026" +
    "\004\000\002\027\005\000\002\027\003\000\002\030\005" +
    "\000\002\031\005\000\002\031\003\000\002\032\007\000" +
    "\002\032\003\000\002\033\005\000\002\033\005\000\002" +
    "\033\003\000\002\034\005\000\002\034\005\000\002\034" +
    "\003\000\002\035\003\000\002\035\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\010\011\010\012\004\013\011\001\002\000" +
    "\004\031\206\001\002\000\004\002\205\001\002\000\010" +
    "\012\uffed\013\uffed\015\uffed\001\002\000\010\012\004\013" +
    "\011\015\020\001\002\000\004\031\162\001\002\000\004" +
    "\031\102\001\002\000\006\012\004\013\011\001\002\000" +
    "\010\012\uffee\013\uffee\015\uffee\001\002\000\010\012\uffec" +
    "\013\uffec\015\uffec\001\002\000\010\012\004\013\011\015" +
    "\020\001\002\000\004\002\000\001\002\000\010\012\uffef" +
    "\013\uffef\015\uffef\001\002\000\004\031\021\001\002\000" +
    "\006\003\022\015\025\001\002\000\004\041\101\001\002" +
    "\000\010\003\022\015\025\032\077\001\002\000\010\003" +
    "\uffcd\015\uffcd\032\uffcd\001\002\000\004\033\026\001\002" +
    "\000\016\003\037\004\034\005\030\006\040\033\033\035" +
    "\035\001\002\000\024\032\uffbe\034\uffbe\036\uffbe\041\uffbe" +
    "\043\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\001\002\000" +
    "\014\032\ufff3\034\ufff3\036\ufff3\041\ufff3\043\ufff3\001\002" +
    "\000\004\043\070\001\002\000\020\032\ufff2\034\ufff2\036" +
    "\ufff2\041\ufff2\043\ufff2\045\064\046\065\001\002\000\006" +
    "\004\034\033\033\001\002\000\024\032\uffbd\034\uffbd\036" +
    "\uffbd\041\uffbd\043\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd" +
    "\001\002\000\020\003\037\004\034\005\030\006\040\031" +
    "\050\033\033\035\035\001\002\000\014\032\ufff1\034\ufff1" +
    "\036\ufff1\041\ufff1\043\ufff1\001\002\000\004\041\046\001" +
    "\002\000\014\032\ufff4\034\ufff4\036\ufff4\041\ufff4\043\ufff4" +
    "\001\002\000\024\032\uffc1\034\uffc1\036\uffc1\041\uffc1\043" +
    "\uffc1\045\uffc1\046\uffc1\047\043\050\042\001\002\000\006" +
    "\004\034\033\033\001\002\000\006\004\034\033\033\001" +
    "\002\000\024\032\uffc0\034\uffc0\036\uffc0\041\uffc0\043\uffc0" +
    "\045\uffc0\046\uffc0\047\uffc0\050\uffc0\001\002\000\024\032" +
    "\uffbf\034\uffbf\036\uffbf\041\uffbf\043\uffbf\045\uffbf\046\uffbf" +
    "\047\uffbf\050\uffbf\001\002\000\014\032\ufff0\034\ufff0\036" +
    "\ufff0\041\ufff0\043\ufff0\001\002\000\006\036\uffc4\043\uffc4" +
    "\001\002\000\016\003\037\004\034\005\030\006\040\033" +
    "\033\035\035\001\002\000\006\036\uffc6\043\uffc6\001\002" +
    "\000\006\036\054\043\053\001\002\000\020\003\037\004" +
    "\034\005\030\006\040\031\050\033\033\035\035\001\002" +
    "\000\014\032\uffc8\034\uffc8\036\uffc8\041\uffc8\043\uffc8\001" +
    "\002\000\006\036\uffc7\043\uffc7\001\002\000\004\043\057" +
    "\001\002\000\016\003\037\004\034\005\030\006\040\033" +
    "\033\035\035\001\002\000\004\032\061\001\002\000\006" +
    "\036\uffc5\043\uffc5\001\002\000\010\034\063\045\064\046" +
    "\065\001\002\000\024\032\uffbc\034\uffbc\036\uffbc\041\uffbc" +
    "\043\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\001\002\000" +
    "\006\004\034\033\033\001\002\000\006\004\034\033\033" +
    "\001\002\000\024\032\uffc2\034\uffc2\036\uffc2\041\uffc2\043" +
    "\uffc2\045\uffc2\046\uffc2\047\043\050\042\001\002\000\024" +
    "\032\uffc3\034\uffc3\036\uffc3\041\uffc3\043\uffc3\045\uffc3\046" +
    "\uffc3\047\043\050\042\001\002\000\016\003\037\004\034" +
    "\005\030\006\040\033\033\035\035\001\002\000\006\034" +
    "\uffc9\043\uffc9\001\002\000\006\034\073\043\074\001\002" +
    "\000\004\041\076\001\002\000\016\003\037\004\034\005" +
    "\030\006\040\033\033\035\035\001\002\000\006\034\uffca" +
    "\043\uffca\001\002\000\010\003\uffcc\015\uffcc\032\uffcc\001" +
    "\002\000\004\002\uffcf\001\002\000\010\003\uffce\015\uffce" +
    "\032\uffce\001\002\000\010\003\uffcb\015\uffcb\032\uffcb\001" +
    "\002\000\016\003\110\014\112\016\105\017\113\023\104" +
    "\024\103\001\002\000\004\042\157\001\002\000\004\042" +
    "\154\001\002\000\004\042\151\001\002\000\020\003\uffd9" +
    "\014\uffd9\016\uffd9\017\uffd9\023\uffd9\024\uffd9\032\uffd9\001" +
    "\002\000\020\003\110\014\112\016\105\017\113\023\104" +
    "\024\103\032\147\001\002\000\004\041\146\001\002\000" +
    "\020\003\uffe6\014\uffe6\016\uffe6\017\uffe6\023\uffe6\024\uffe6" +
    "\032\uffe6\001\002\000\004\037\117\001\002\000\004\042" +
    "\114\001\002\000\016\003\037\004\034\005\030\006\040" +
    "\033\033\035\035\001\002\000\004\041\116\001\002\000" +
    "\020\003\uffdc\014\uffdc\016\uffdc\017\uffdc\023\uffdc\024\uffdc" +
    "\032\uffdc\001\002\000\014\003\122\025\125\026\124\027" +
    "\123\030\121\001\002\000\016\003\122\025\125\026\124" +
    "\027\123\030\121\040\144\001\002\000\004\042\141\001" +
    "\002\000\004\041\140\001\002\000\004\042\135\001\002" +
    "\000\004\042\132\001\002\000\004\042\127\001\002\000" +
    "\016\003\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\040\uffd5" +
    "\001\002\000\016\003\037\004\034\005\030\006\040\033" +
    "\033\035\035\001\002\000\004\041\131\001\002\000\016" +
    "\003\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\040\uffd4\001" +
    "\002\000\016\003\037\004\034\005\030\006\040\033\033" +
    "\035\035\001\002\000\004\041\134\001\002\000\016\003" +
    "\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\040\uffd3\001\002" +
    "\000\016\003\037\004\034\005\030\006\040\033\033\035" +
    "\035\001\002\000\004\041\137\001\002\000\016\003\uffd2" +
    "\025\uffd2\026\uffd2\027\uffd2\030\uffd2\040\uffd2\001\002\000" +
    "\016\003\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\040\uffd0" +
    "\001\002\000\016\003\037\004\034\005\030\006\040\033" +
    "\033\035\035\001\002\000\004\041\143\001\002\000\016" +
    "\003\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\040\uffd1\001" +
    "\002\000\020\003\uffd7\014\uffd7\016\uffd7\017\uffd7\023\uffd7" +
    "\024\uffd7\032\uffd7\001\002\000\016\003\uffd6\025\uffd6\026" +
    "\uffd6\027\uffd6\030\uffd6\040\uffd6\001\002\000\020\003\uffd8" +
    "\014\uffd8\016\uffd8\017\uffd8\023\uffd8\024\uffd8\032\uffd8\001" +
    "\002\000\010\012\uffe8\013\uffe8\015\uffe8\001\002\000\020" +
    "\003\uffe7\014\uffe7\016\uffe7\017\uffe7\023\uffe7\024\uffe7\032" +
    "\uffe7\001\002\000\016\003\037\004\034\005\030\006\040" +
    "\033\033\035\035\001\002\000\004\041\153\001\002\000" +
    "\020\003\uffdd\014\uffdd\016\uffdd\017\uffdd\023\uffdd\024\uffdd" +
    "\032\uffdd\001\002\000\016\003\037\004\034\005\030\006" +
    "\040\033\033\035\035\001\002\000\004\041\156\001\002" +
    "\000\020\003\uffdb\014\uffdb\016\uffdb\017\uffdb\023\uffdb\024" +
    "\uffdb\032\uffdb\001\002\000\016\003\037\004\034\005\030" +
    "\006\040\033\033\035\035\001\002\000\004\041\161\001" +
    "\002\000\020\003\uffda\014\uffda\016\uffda\017\uffda\023\uffda" +
    "\024\uffda\032\uffda\001\002\000\010\003\165\007\164\010" +
    "\166\001\002\000\012\003\ufffc\007\ufffc\010\ufffc\032\ufffc" +
    "\001\002\000\004\006\ufff8\001\002\000\004\041\203\001" +
    "\002\000\004\006\ufff9\001\002\000\012\003\165\007\164" +
    "\010\166\032\202\001\002\000\004\006\171\001\002\000" +
    "\004\044\172\001\002\000\012\003\175\004\034\005\176" +
    "\033\033\001\002\000\004\041\200\001\002\000\010\041" +
    "\ufff6\045\064\046\065\001\002\000\004\041\177\001\002" +
    "\000\004\041\ufff7\001\002\000\004\041\ufff5\001\002\000" +
    "\012\003\ufffb\007\ufffb\010\ufffb\032\ufffb\001\002\000\012" +
    "\003\ufffd\007\ufffd\010\ufffd\032\ufffd\001\002\000\006\012" +
    "\ufffe\013\ufffe\001\002\000\012\003\ufffa\007\ufffa\010\ufffa" +
    "\032\ufffa\001\002\000\004\002\uffff\001\002\000\004\002" +
    "\001\001\002\000\022\003\213\016\212\017\216\020\217" +
    "\021\215\022\214\023\211\024\207\001\002\000\004\042" +
    "\246\001\002\000\024\003\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\024\uffe9\032\uffe9\001\002\000" +
    "\004\042\243\001\002\000\004\042\240\001\002\000\004" +
    "\041\237\001\002\000\004\042\234\001\002\000\004\042" +
    "\231\001\002\000\004\042\226\001\002\000\004\042\223" +
    "\001\002\000\024\003\213\016\212\017\216\020\217\021" +
    "\215\022\214\023\211\024\207\032\222\001\002\000\024" +
    "\003\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023" +
    "\uffea\024\uffea\032\uffea\001\002\000\010\012\uffeb\013\uffeb" +
    "\015\uffeb\001\002\000\016\003\037\004\034\005\030\006" +
    "\040\033\033\035\035\001\002\000\004\041\225\001\002" +
    "\000\024\003\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022" +
    "\uffe3\023\uffe3\024\uffe3\032\uffe3\001\002\000\016\003\037" +
    "\004\034\005\030\006\040\033\033\035\035\001\002\000" +
    "\004\041\230\001\002\000\024\003\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\032\uffe4\001" +
    "\002\000\016\003\037\004\034\005\030\006\040\033\033" +
    "\035\035\001\002\000\004\041\233\001\002\000\024\003" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2" +
    "\024\uffe2\032\uffe2\001\002\000\016\003\037\004\034\005" +
    "\030\006\040\033\033\035\035\001\002\000\004\041\236" +
    "\001\002\000\024\003\uffe1\016\uffe1\017\uffe1\020\uffe1\021" +
    "\uffe1\022\uffe1\023\uffe1\024\uffe1\032\uffe1\001\002\000\024" +
    "\003\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023" +
    "\uffde\024\uffde\032\uffde\001\002\000\016\003\037\004\034" +
    "\005\030\006\040\033\033\035\035\001\002\000\004\041" +
    "\242\001\002\000\024\003\uffe5\016\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\022\uffe5\023\uffe5\024\uffe5\032\uffe5\001\002\000" +
    "\016\003\037\004\034\005\030\006\040\033\033\035\035" +
    "\001\002\000\004\041\245\001\002\000\024\003\uffe0\016" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\032\uffe0\001\002\000\016\003\037\004\034\005\030\006" +
    "\040\033\033\035\035\001\002\000\004\041\250\001\002" +
    "\000\024\003\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022" +
    "\uffdf\023\uffdf\024\uffdf\032\uffdf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\016\002\004\003\011\011\006\012\012\013" +
    "\005\014\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\016\013\005\014\013\024" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\011\014\012\012\013\005\014\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\016\013\005\014\013" +
    "\024\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\025\022\026\023\001\001\000\002" +
    "\001\001\000\004\026\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\010\030\030\035\033\031\034\040" +
    "\035\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\033\061\034\040" +
    "\035\026\001\001\000\002\001\001\000\020\010\046\030" +
    "\035\031\051\032\050\033\031\034\040\035\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\035\044\001\001\000\004\035\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\010\055\030\035\033\031" +
    "\034\040\035\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\010\046\030\035\032\054\033\031\034\040" +
    "\035\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\010\057\030\035\033\031\034\040" +
    "\035\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\034\066\035\026" +
    "\001\001\000\006\034\065\035\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\010\070\027\071\030\035" +
    "\033\031\034\040\035\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\010\074\030\035" +
    "\033\031\034\040\035\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\015\105\017\106\022\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\105\022\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\010\114\030\035\033\031\034\040\035\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\020\117" +
    "\023\125\001\001\000\004\023\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\010\127\030" +
    "\035\033\031\034\040\035\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\010\132\030\035\033\031\034" +
    "\040\035\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\010\135\030\035\033\031\034\040\035\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\010\141\030\035\033\031\034\040\035\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\010\151\030\035\033\031\034\040" +
    "\035\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\010\154\030\035\033\031\034\040\035\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\010\157\030" +
    "\035\033\031\034\040\035\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\166\005\162\006\167\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\200\006\167\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\172\033\173" +
    "\034\040\035\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\217\021\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\010\223\030\035\033\031\034" +
    "\040\035\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\010\226\030\035\033\031\034\040\035\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\010\231" +
    "\030\035\033\031\034\040\035\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\010\234\030\035\033\031" +
    "\034\040\035\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\010\240\030\035\033\031" +
    "\034\040\035\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\010\243\030\035\033\031\034\040\035\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\010" +
    "\246\030\035\033\031\034\040\035\026\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public LinkedList<Declaracion> globales;
    public LinkedList<Grafica> graficas;
    public LinkedList<Galeria> galerias;
    
    public LinkedList<ErrorAnalisis> errores = new LinkedList<>();

    public void syntax_error(Symbol s)
    {
        ErrorAnalisis e = new ErrorAnalisis("Error Sintáctico",s.value.toString(),"no se esperaba este símbolo",s.left,s.right);
        errores.add(e);      
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        ErrorAnalisis e = new ErrorAnalisis("Error Sintáctico Irrecuperable","","no se esperaba este símbolo: " + symbl_name_from_id(s.sym),s.left,s.right);
        errores.add(e);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= DEFINIR_GLOBALES CUERPO GALERIA 
            {
              Object RESULT =null;
		int glleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int glright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Declaracion> gl = (LinkedList<Declaracion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Grafica> c = (LinkedList<Grafica>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Galeria> g = (LinkedList<Galeria>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                    globales = gl;
                                                                    graficas = c;
                                                                    galerias = g;
                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= CUERPO GALERIA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Grafica> c = (LinkedList<Grafica>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Galeria> g = (LinkedList<Galeria>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                    graficas = c;
                                                                    galerias = g;
                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DEFINIR_GLOBALES ::= resDefinirGlobales llaveAbierta VARIABLES llaveCerrada 
            {
              LinkedList<Declaracion> RESULT =null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Declaracion> variables = (LinkedList<Declaracion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = variables;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFINIR_GLOBALES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VARIABLES ::= VARIABLES VAR 
            {
              LinkedList<Declaracion> RESULT =null;
		int variablesleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int variablesright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Declaracion> variables = (LinkedList<Declaracion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Declaracion v = (Declaracion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = variables; RESULT.add(v);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VARIABLES ::= VAR 
            {
              LinkedList<Declaracion> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Declaracion v = (Declaracion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(v);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VARIABLES",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VAR ::= TIPO identificador signoIgual VALOR_INICIAL puntoYComa 
            {
              Declaracion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Declaracion t = (Declaracion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Valor valor = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                                                                                RESULT = t;
                                                                                t.setIdentificador(id);
                                                                                t.setValor(valor);
                                                                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VAR",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VAR ::= error puntoYComa 
            {
              Declaracion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VAR",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPO ::= resInt 
            {
              Declaracion RESULT =null;
		RESULT = new Declaracion(Declaracion.Tipo.ENTERO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPO ::= resString 
            {
              Declaracion RESULT =null;
		RESULT = new Declaracion(Declaracion.Tipo.STRING);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VALOR_INICIAL ::= valorCadena 
            {
              Valor RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Valor(valor, Valor.Tipo.STRING);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VALOR_INICIAL ::= EXPRESION_ARITMETICA 
            {
              Valor RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Valor(valor, Valor.Tipo.ENTERO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VALOR_INICIAL ::= error puntoYComa 
            {
              Valor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR_INICIAL",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VALOR ::= identificador 
            {
              Valor RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Valor(id, Valor.Tipo.IDENTIFICADOR);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VALOR ::= valorCadena 
            {
              Valor RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Valor(cadena, Valor.Tipo.STRING);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VALOR ::= EXPRESION_ARITMETICA 
            {
              Valor RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Valor(num, Valor.Tipo.ENTERO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VALOR ::= ARREGLO 
            {
              Valor RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Valor> arreglo = (LinkedList<Valor>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Valor(arreglo, Valor.Tipo.ARREGLO);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VALOR ::= error puntoYComa 
            {
              Valor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO ::= CUERPO BLOQUE 
            {
              LinkedList<Grafica> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Grafica> c = (LinkedList<Grafica>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Grafica b = (Grafica)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = c; RESULT.add(b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUERPO ::= BLOQUE 
            {
              LinkedList<Grafica> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Grafica b = (Grafica)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CUERPO",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BLOQUE ::= GRAFICA_BARRAS 
            {
              Grafica RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Caracteristica> g = (LinkedList<Caracteristica>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Grafica(Grafica.Tipo.BARRA); RESULT.caracteristicas = g;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BLOQUE ::= GRAFICA_LINEAS 
            {
              Grafica RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Caracteristica> g = (LinkedList<Caracteristica>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Grafica(Grafica.Tipo.LINEA); RESULT.caracteristicas = g;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // GRAFICA_BARRAS ::= resGraficaBarras llaveAbierta L_CAR_BARRA llaveCerrada 
            {
              LinkedList<Caracteristica> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Caracteristica> lista = (LinkedList<Caracteristica>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = lista;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFICA_BARRAS",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // L_CAR_BARRA ::= L_CAR_BARRA CARACTERISTICA_BARRA 
            {
              LinkedList<Caracteristica> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Caracteristica> lista = (LinkedList<Caracteristica>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracteristica c = (Caracteristica)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = lista; RESULT.add(c);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_CAR_BARRA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // L_CAR_BARRA ::= CARACTERISTICA_BARRA 
            {
              LinkedList<Caracteristica> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracteristica c = (Caracteristica)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(c);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_CAR_BARRA",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // GRAFICA_LINEAS ::= resGraficaLineas llaveAbierta L_CAR_LINEA llaveCerrada 
            {
              LinkedList<Caracteristica> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Caracteristica> lista = (LinkedList<Caracteristica>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = lista;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFICA_LINEAS",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // L_CAR_LINEA ::= L_CAR_LINEA CARACTERISTICA_LINEA 
            {
              LinkedList<Caracteristica> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Caracteristica> lista = (LinkedList<Caracteristica>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracteristica c = (Caracteristica)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = lista; RESULT.add(c);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_CAR_LINEA",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // L_CAR_LINEA ::= CARACTERISTICA_LINEA 
            {
              LinkedList<Caracteristica> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracteristica c = (Caracteristica)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(c);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_CAR_LINEA",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CARACTERISTICA_BARRA ::= resID dosPuntos VALOR puntoYComa 
            {
              Caracteristica RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Valor valor = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Caracteristica(Caracteristica.Tipo.ID, valor);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_BARRA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CARACTERISTICA_BARRA ::= resTitulo dosPuntos VALOR puntoYComa 
            {
              Caracteristica RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Valor valor = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Caracteristica(Caracteristica.Tipo.TITULO, valor);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_BARRA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CARACTERISTICA_BARRA ::= resEjeX dosPuntos VALOR puntoYComa 
            {
              Caracteristica RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Valor valor = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Caracteristica(Caracteristica.Tipo.EJEX, valor);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_BARRA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CARACTERISTICA_BARRA ::= resEjeY dosPuntos VALOR puntoYComa 
            {
              Caracteristica RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Valor valor = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Caracteristica(Caracteristica.Tipo.EJEY, valor);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_BARRA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CARACTERISTICA_BARRA ::= resPuntosXY dosPuntos VALOR puntoYComa 
            {
              Caracteristica RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Valor valor = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Caracteristica(Caracteristica.Tipo.PUNTOSXY, valor);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_BARRA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CARACTERISTICA_BARRA ::= resTituloX dosPuntos VALOR puntoYComa 
            {
              Caracteristica RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Valor valor = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Caracteristica(Caracteristica.Tipo.TITULOX, valor);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_BARRA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CARACTERISTICA_BARRA ::= resTituloY dosPuntos VALOR puntoYComa 
            {
              Caracteristica RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Valor valor = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Caracteristica(Caracteristica.Tipo.TITULOY, valor);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_BARRA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CARACTERISTICA_BARRA ::= error puntoYComa 
            {
              Caracteristica RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_BARRA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CARACTERISTICA_LINEA ::= resID dosPuntos VALOR puntoYComa 
            {
              Caracteristica RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Valor valor = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Caracteristica(Caracteristica.Tipo.ID, valor);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_LINEA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CARACTERISTICA_LINEA ::= resTitulo dosPuntos VALOR puntoYComa 
            {
              Caracteristica RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Valor valor = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Caracteristica(Caracteristica.Tipo.TITULO, valor);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_LINEA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CARACTERISTICA_LINEA ::= resTituloX dosPuntos VALOR puntoYComa 
            {
              Caracteristica RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Valor valor = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Caracteristica(Caracteristica.Tipo.TITULOX, valor);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_LINEA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CARACTERISTICA_LINEA ::= resTituloY dosPuntos VALOR puntoYComa 
            {
              Caracteristica RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Valor valor = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Caracteristica(Caracteristica.Tipo.TITULOY, valor);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_LINEA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CARACTERISTICA_LINEA ::= DEFINIR_XY_LINE 
            {
              Caracteristica RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Caracteristica> valor = (LinkedList<Caracteristica>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new Caracteristica(Caracteristica.Tipo.DEFINIRXYLINE, new Valor(valor, Valor.Tipo.XYLINE));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_LINEA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CARACTERISTICA_LINEA ::= error puntoYComa 
            {
              Caracteristica RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_LINEA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DEFINIR_XY_LINE ::= resDefinirXYLine interrogAbierto L_CAR_XYLINE interrogCerrado 
            {
              LinkedList<Caracteristica> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Caracteristica> lista = (LinkedList<Caracteristica>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = lista;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DEFINIR_XY_LINE",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // L_CAR_XYLINE ::= L_CAR_XYLINE CARACTERISTICA_XYLINE 
            {
              LinkedList<Caracteristica> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Caracteristica> lista = (LinkedList<Caracteristica>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracteristica c = (Caracteristica)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = lista; RESULT.add(c);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_CAR_XYLINE",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // L_CAR_XYLINE ::= CARACTERISTICA_XYLINE 
            {
              LinkedList<Caracteristica> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Caracteristica c = (Caracteristica)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(c);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_CAR_XYLINE",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CARACTERISTICA_XYLINE ::= resNombre dosPuntos VALOR puntoYComa 
            {
              Caracteristica RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Valor valor = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Caracteristica(Caracteristica.Tipo.NOMBRE, valor);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_XYLINE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CARACTERISTICA_XYLINE ::= resColor dosPuntos VALOR puntoYComa 
            {
              Caracteristica RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Valor valor = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Caracteristica(Caracteristica.Tipo.COLOR, valor);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_XYLINE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CARACTERISTICA_XYLINE ::= resGrosor dosPuntos VALOR puntoYComa 
            {
              Caracteristica RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Valor valor = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Caracteristica(Caracteristica.Tipo.GROSOR, valor);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_XYLINE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CARACTERISTICA_XYLINE ::= resPuntos dosPuntos VALOR puntoYComa 
            {
              Caracteristica RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Valor valor = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Caracteristica(Caracteristica.Tipo.PUNTOS, valor);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_XYLINE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CARACTERISTICA_XYLINE ::= error puntoYComa 
            {
              Caracteristica RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CARACTERISTICA_XYLINE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // GALERIA ::= resGaleria llaveAbierta L_GALERIA llaveCerrada 
            {
              LinkedList<Galeria> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Galeria> lista = (LinkedList<Galeria>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = lista;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GALERIA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // L_GALERIA ::= L_GALERIA DECLARACION_GALERIA 
            {
              LinkedList<Galeria> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Galeria> lista = (LinkedList<Galeria>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Galeria g = (Galeria)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = lista; RESULT.add(g);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_GALERIA",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // L_GALERIA ::= DECLARACION_GALERIA 
            {
              LinkedList<Galeria> RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Galeria g = (Galeria)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(g);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_GALERIA",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION_GALERIA ::= resGaleria parentAbierto VALOR coma L_GRAFICAS parentCerrado puntoYComa 
            {
              Galeria RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Valor id = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Valor> lista = (LinkedList<Valor>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new Galeria(id, lista);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_GALERIA",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION_GALERIA ::= error puntoYComa 
            {
              Galeria RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION_GALERIA",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // L_GRAFICAS ::= L_GRAFICAS coma VALOR 
            {
              LinkedList<Valor> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Valor> lista = (LinkedList<Valor>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Valor id = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = lista; RESULT.add(id);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_GRAFICAS",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // L_GRAFICAS ::= VALOR 
            {
              LinkedList<Valor> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Valor id = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(id);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_GRAFICAS",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ARREGLO ::= corcheteAbierto ITEMS_ARREGLO corcheteCerrado 
            {
              LinkedList<Valor> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Valor> lista = (LinkedList<Valor>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = lista;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLO",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ITEMS_ARREGLO ::= ITEMS_ARREGLO coma ITEM 
            {
              LinkedList<Valor> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Valor> lista = (LinkedList<Valor>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int itemleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Valor item = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = lista; RESULT.add(item);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ITEMS_ARREGLO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ITEMS_ARREGLO ::= ITEM 
            {
              LinkedList<Valor> RESULT =null;
		int itemleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int itemright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Valor item = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(item);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ITEMS_ARREGLO",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ITEM ::= llaveAbierta VALOR coma VALOR llaveCerrada 
            {
              Valor RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Valor num1 = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Valor num2 = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                                                                    LinkedList<Valor> nuevo = new LinkedList<>(); nuevo.add(num1); nuevo.add(num2);
                                                                    RESULT = new Valor(nuevo, Valor.Tipo.ARREGLO);
                                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ITEM",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ITEM ::= VALOR 
            {
              Valor RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Valor valor = (Valor)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = valor;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ITEM",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA signoMas F 
            {
              Integer RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer num1 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer num2 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = num1 + num2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION_ARITMETICA ::= EXPRESION_ARITMETICA signoMenos F 
            {
              Integer RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer num1 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer num2 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = num1 - num2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION_ARITMETICA ::= F 
            {
              Integer RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = num;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXPRESION_ARITMETICA",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // F ::= F signoPor D 
            {
              Integer RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer num1 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer num2 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = num1 * num2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("F",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // F ::= F signoDividido D 
            {
              Integer RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer num1 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer num2 = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = num1 / num2;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("F",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // F ::= D 
            {
              Integer RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = num;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("F",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // D ::= valorEntero 
            {
              Integer RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = Integer.valueOf(valor);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("D",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // D ::= parentAbierto EXPRESION_ARITMETICA parentCerrado 
            {
              Integer RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = valor;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("D",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
